/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Objetos.Modulo;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.Transferable;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author soporte
 */
public class FechaYHora extends javax.swing.JDialog {

    /**
     * Creates new form FechaYHora
     */
    //se recibe el modulo para compartir la informacion entre clases
    Modulo modulo;
    Clipboard cb;
    public FechaYHora(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        //se inicializa el metodo totalHoras() para mostrar la suma total de las horas
        //dictadas por el docente
        totalhoras();
        panelFechaYHora.setFocusable(true);
        cb = Toolkit.getDefaultToolkit().getSystemClipboard();

    }

    //modificador del modulo que utiliza la clase
    public void setModulo(Modulo modulo) {
        this.modulo = modulo;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFechaYHora = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        txtTotalHoras = new javax.swing.JTextField();
        btnAtras = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        dateChooserPanel1 = new datechooser.beans.DateChooserPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelFechaYHora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                panelFechaYHoraKeyPressed(evt);
            }
        });

        tblTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "", "0"},
                {"2", null, "0"},
                {"3", null, "0"},
                {"4", null, "0"},
                {"5", null, "0"},
                {"6", null, "0"},
                {"7", null, "0"},
                {"8", null, "0"}
            },
            new String [] {
                "N.", "Día/Mes/Año", "Horas Dictadas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTabla.setSurrendersFocusOnKeystroke(true);
        tblTabla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblTablaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tblTabla);

        jLabel1.setText("Agregar Fechas y Horas Dictadas por el Docente");

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        txtTotalHoras.setEditable(false);
        txtTotalHoras.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Total Horas"));

        btnAtras.setText("Atras");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFechaYHoraLayout = new javax.swing.GroupLayout(panelFechaYHora);
        panelFechaYHora.setLayout(panelFechaYHoraLayout);
        panelFechaYHoraLayout.setHorizontalGroup(
            panelFechaYHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFechaYHoraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFechaYHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFechaYHoraLayout.createSequentialGroup()
                        .addGroup(panelFechaYHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFechaYHoraLayout.createSequentialGroup()
                        .addComponent(btnAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtras)
                        .addGap(41, 41, 41)
                        .addComponent(txtTotalHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelFechaYHoraLayout.setVerticalGroup(
            panelFechaYHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFechaYHoraLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFechaYHoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAceptar)
                    .addComponent(btnAtras))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dateChooserPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dateChooserPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelFechaYHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelFechaYHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // TODO add your handling code here:
        //si los meses y los dias corresponden al formato se procede a confirmar la informacion
        //cuando se confirma la informacion se cierra la ventana y se abre de nuevo la clase Dialogo
        //se ejecuta el metodo totalPagar() para seguir introduciendo los datos
        if (!validarDiasMes()) {
            int res = JOptionPane.showConfirmDialog(null, "¿Esta seguro que los datos estan completos?", "Importante", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                try {
                    llenar();
                    dispose();
                    Dialogo dialogo = new Dialogo(Formato.getFrames()[0], rootPaneCheckingEnabled);
                    dialogo.setModulo(modulo);
                    dialogo.totalPagar();
                    dialogo.setVisible(true);
                    dialogo.setAlwaysOnTop(true);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            }
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        // TODO add your handling code here:
        //vuelve a la clase Dialogo y muestra el formulario anterior a las fechas y horas
        dispose();
        Dialogo dialogo = new Dialogo(Formato.getFrames()[0], rootPaneCheckingEnabled);
        dialogo.setModulo(modulo);
        dialogo.valorHora();
        dialogo.setVisible(true);
        dialogo.setAlwaysOnTop(true);
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void tblTablaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblTablaKeyTyped
       /*
        se valida la escritura de la tabla haciendo que no sea editable y que mediante
        los eventos de las teclas se capte la informacion y se escriba en la tabla
        evitando asi errores de escritura
        */
       
       //si la tecla que se lee es la de borrar borra el ultimo caracter de la cadena
       if(evt.getKeyChar()==KeyEvent.VK_CONTROL&&evt.getKeyChar()==KeyEvent.VK_V){
           Transferable dato = cb.getContents(this);
           String info=dato.toString();
           char [] c=info.toCharArray();
           for(int i=0;i<c.length;i++){
           if (tblTabla.getSelectedColumn() == 1) {
                if ((c[i] < '0' || c[i] > '9') && c[i] != '/') {
                    evt.consume();
                } else if (tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) != null) {
                    String s = tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) + "" + evt.getKeyChar();
                    tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
                } else {
                    String s = "" + evt.getKeyChar();
                    tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
                }
            }
        if (tblTabla.getSelectedColumn() == 2) {
            if (c[i] < '0' || c[i] > '9') {
                evt.consume();
            } else if (tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) != null) {
                String s = tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) + "" + evt.getKeyChar();
                tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            } else {
                String s = "" + evt.getKeyChar();
                tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            }
        }
       }
       }
       
        if(evt.getKeyChar()!=KeyEvent.VK_BACK_SPACE){
            if (tblTabla.getSelectedColumn() == 1) {
                char c = evt.getKeyChar();
                if ((c < '0' || c > '9') && c != '/') {
                    evt.consume();
                } else if (tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) != null) {
                    String s = tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) + "" + evt.getKeyChar();
                    tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
                } else {
                    String s = "" + evt.getKeyChar();
                    tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
                }
            }
        if (tblTabla.getSelectedColumn() == 2) {
            char c = evt.getKeyChar();
            if (c < '0' || c > '9') {
                evt.consume();
            } else if (tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) != null) {
                String s = tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) + "" + evt.getKeyChar();
                tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            } else {
                String s = "" + evt.getKeyChar();
                tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            }
        }
        }else{
            if(tblTabla.getSelectedColumn() == 1){
                if(tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()).toString().length()>1){
        if (tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) != null||!tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()).toString().isEmpty()) {
                String s = tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) + "";
                s=s.substring(0, s.length()-1);
                tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            } }else {
                String s = "";
                tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            }
        }if(tblTabla.getSelectedColumn() == 2){
            if(tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()).toString().length()>1){
                if (tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) != null||!tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()).toString().isEmpty()) {
                String s = tblTabla.getValueAt(tblTabla.getSelectedRow(), tblTabla.getSelectedColumn()) + "";
                s=s.substring(0, s.length()-1);
                tblTabla.setValueAt(s, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            } }else{
                tblTabla.setValueAt(0, tblTabla.getSelectedRow(), tblTabla.getSelectedColumn());
            }
        }
        }
    }//GEN-LAST:event_tblTablaKeyTyped

    private void panelFechaYHoraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panelFechaYHoraKeyPressed
        // TODO add your handling code here:
                if(evt.getKeyChar()==KeyEvent.VK_ENTER){
            btnAceptarActionPerformed(null);
        }
    }//GEN-LAST:event_panelFechaYHoraKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FechaYHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FechaYHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FechaYHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FechaYHora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FechaYHora dialog = new FechaYHora(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    //el string dado por el usuario esta en el formato dd/mm/aaaa
    //para validar se divide la cadena y si los dias son mayores a 31 
    //o si los meses son mayores a 12 se muestra el mensaje de error en un JOptionDialog
    public boolean validarDiasMes() {
        int i = 0;
        String fecha;
        int cont = 0;
        try{
        while (i<8&&tblTabla.getValueAt(i, 1) != null && tblTabla.getValueAt(i, 2) != null) {
            if(i<8){
            fecha = tblTabla.getValueAt(i, 1) + "";
            String[] parts = fecha.split("/");
            int dia;
            int mes;
            dia = Integer.parseInt(parts[0]);
            mes = Integer.parseInt(parts[1]);
            if (mes > 12) {
                JOptionPane.showMessageDialog(this, "Los meses no pueden ser mayores de 12");
                cont++;
            }
            if (dia > 31) {
                JOptionPane.showMessageDialog(this, "Los dias no pueden ser mayores de 31");
                cont++;
            }
            i++;
            }}}catch(Exception e){
        JOptionPane.showMessageDialog(this, "No puede dejar campos vacíos");
        cont++;
        }
        return cont > 0;
    }

    //se convierte la cadena dada por el usuario a un objeto Calendar para almacenar la informacion en el objeto DiasHoras
    public Calendar fechaCalendar(String fecha) {
        Calendar cal = Calendar.getInstance();
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            cal.setTime(sdf.parse(fecha));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "La fecha debe estar en el formato de dias/mes/año");
        }
        return cal;
    }

    //se recibe la informacion de las fechas dadas de clase y las horas dadas
    //se  convierten a Calendar y a int para almacenarlos en el objeto DiasHoras
    //este objeto se guarda en el objeto Modulo.
    public void llenar() {
        Calendar fecha;
        int horas;
        int i = 0;
        while (i<8&&tblTabla.getValueAt(i, 1) != null && tblTabla.getValueAt(i, 2) != null) {
            
            fecha = fechaCalendar((tblTabla.getValueAt(i, 1) + "").trim());
            horas = Integer.parseInt((tblTabla.getValueAt(i, 2) + "").trim());          
            modulo.AgregarFechaHora(fecha, horas);
            i++;
        }
    }

    //se calcula el total de las horas escritas en la tabla para mostrarle al usuario
    public void totalhoras() {
        DefaultTableModel dt = (DefaultTableModel) tblTabla.getModel();
        dt.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int horas = 0;
                for (int i = 0; i < 8; i++) {
                    if (dt.getValueAt(i, 2) != null) {
                        horas += Integer.parseInt(dt.getValueAt(i, 2).toString().trim());
                    }
                }
                txtTotalHoras.setText(horas + "");
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAtras;
    private datechooser.beans.DateChooserPanel dateChooserPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelFechaYHora;
    private javax.swing.JTable tblTabla;
    private javax.swing.JTextField txtTotalHoras;
    // End of variables declaration//GEN-END:variables
}
